{"version":3,"sources":["components/Application.js","App.js","reportWebVitals.js","index.js"],"names":["Application","useState","query","setQuery","country","setCountry","image","setImage","date","setDate","humidity","setHumidity","rain","setRain","text","setText","fetch","then","response","json","data","setWeather","Math","floor","current","feelslike_f","location","name","forecast","forecastday","condition","icon","day","daily_chance_of_rain","weather","url","className","src","placeholder","type","onKeyPress","e","key","alert","onChange","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0EeA,MAvEf,WACI,MAA0BC,mBAAS,UAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAwBV,mBAAS,IAAjC,mBAAOW,EAAP,KAAaC,EAAb,KACA,EAAwBZ,mBAAS,IAAjC,mBAAOa,EAAP,KAAaC,EAAb,KACA,EAA8Bd,oBAAS,WACnCe,MAAM,6HAEDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFC,EAAWC,KAAKC,MAAMH,EAAKI,QAAQC,cACnCpB,EAAW,GAAD,OAAIe,EAAKM,SAASC,KAAlB,aAA2BP,EAAKM,SAAStB,UACnDK,EAAQW,EAAKQ,SAASC,YAAY,GAAGrB,MACrCD,EAASa,EAAKI,QAAQM,UAAUC,MAChCpB,EAAYS,EAAKI,QAAQd,UACzBK,EAAQK,EAAKI,QAAQM,UAAUhB,MAC/BD,EAAQO,EAAKQ,SAASC,YAAY,GAAGG,IAAIC,4BAXrD,mBAAOC,EAAP,KAAgBb,EAAhB,KAiBMc,EAAG,2FAAuFjC,EAAvF,kCAsBT,OACI,sBAAKkC,UAAYF,EAAU,GAAM,mBAAqB,mBAAtD,UACI,oBAAIE,UAAU,OAAd,SAAsB5B,IACtB,oBAAI4B,UAAU,UAAd,SAA0BhC,IAC1B,sBAAKgC,UAAU,WAAf,UACA,qBAAKA,UAAU,QAAQC,IAAK/B,IAC5B,oBAAI8B,UAAU,OAAd,SAAsBtB,OAEtB,sBAAKsB,UAAU,UAAf,UACG,sBAAKA,UAAU,WAAf,UACI,oBAAIA,UAAU,eAAd,sBACH,6BAAK1B,OAEN,sBAAK0B,UAAU,WAAf,UACI,oBAAIA,UAAU,WAAd,uBACJ,6BAAKxB,UAGR,qBAAIwB,UAAU,UAAd,UAAyBF,EAAzB,WACA,uBAAOE,UAAU,YAAYE,YAAY,oBAAoBC,KAAK,OAAOC,WAtClE,SAACC,GACC,UAAVA,EAAEC,KACD1B,MAAMmB,GACLlB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACCA,GACCC,EAAWC,KAAKC,MAAMH,EAAKI,QAAQC,cACvCpB,EAAW,GAAD,OAAIe,EAAKM,SAASC,KAAlB,aAA2BP,EAAKM,SAAStB,UACnDK,EAAQW,EAAKQ,SAASC,YAAY,GAAGrB,MACrCD,EAASa,EAAKI,QAAQM,UAAUC,MAChCpB,EAAYS,EAAKI,QAAQd,UACzBG,EAAQO,EAAKQ,SAASC,YAAY,GAAGG,IAAIC,uBAE1CU,MAAM,sBAyBoFC,SAAU,SAAAH,GAAC,OAAItC,EAASsC,EAAEI,OAAOC,cC1D3HC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACC,cAAC,EAAD,OCMUY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ba7dfe82.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../App.css';\r\n\r\nfunction Application() {\r\n    const [query, setQuery] = useState('Berlin');\r\n    const [country, setCountry] = useState('');\r\n    const [image, setImage] = useState('')\r\n    const [date, setDate] = useState('');\r\n    const [humidity, setHumidity] = useState('');\r\n    const [rain, setRain] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [weather, setWeather] = useState(() => {\r\n        fetch(`https://api.weatherapi.com/v1/forecast.json?key=dbe5af8d5484472c84d03742210311&q=berlin&days=7&aqi=no&alerts=no\r\n        `)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setWeather(Math.floor(data.current.feelslike_f));\r\n                setCountry(`${data.location.name}, ${data.location.country}`);\r\n                setDate(data.forecast.forecastday[0].date);\r\n                setImage(data.current.condition.icon);\r\n                setHumidity(data.current.humidity);\r\n                setText(data.current.condition.text);\r\n                setRain(data.forecast.forecastday[0].day.daily_chance_of_rain);\r\n            })\r\n    }\r\n    )\r\n\r\n    \r\n    const url = `https://api.weatherapi.com/v1/forecast.json?key=dbe5af8d5484472c84d03742210311&q=${query}&days=7&aqi=no&alerts=no\r\n    `\r\n\r\n    const search = (e) => {\r\n        if(e.key === 'Enter') {\r\n            fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if(data) {\r\n                    setWeather(Math.floor(data.current.feelslike_f))\r\n                setCountry(`${data.location.name}, ${data.location.country}`)\r\n                setDate(data.forecast.forecastday[0].date);\r\n                setImage(data.current.condition.icon);\r\n                setHumidity(data.current.humidity);\r\n                setRain(data.forecast.forecastday[0].day.daily_chance_of_rain);\r\n                } else {\r\n               alert('city not found')\r\n                }                \r\n            })\r\n    }\r\n}\r\n\r\n    return (\r\n        <div className={(weather > 72) ? 'application warm' : 'application cool'}>\r\n            <h1 className='date'>{date}</h1>\r\n            <h3 className='country' >{country}</h3>\r\n            <div className='imageDiv'>\r\n            <img className='image' src={image} />\r\n            <h3 className='text'>{text}</h3>\r\n            </div>\r\n            <div className='altInfo'>\r\n               <div className='humidity'>\r\n                   <h5 className='humidityText'>Humidity</h5>\r\n                <h3>{humidity}</h3>\r\n               </div>\r\n               <div className='rainSnow'>\r\n                   <h5 className='rainText'>Rain/Snow</h5>\r\n               <h3>{rain}</h3>\r\n               </div>\r\n            </div>\r\n            <h3 className='weather'>{weather}&deg;F</h3>\r\n            <input className='inputCity' placeholder='Search for a City' type='text' onKeyPress={search} onChange={e => setQuery(e.target.value)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Application","import './App.css';\nimport Application from './components/Application'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Application />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}